# Makefile for Chapter 11 Programs
# Inheritance

CC = CC
CFLAGS = -O -ptused -n32 -experimental
.C.o:
	$(CC) $(CFLAGS) -c $<
.C:
	$(CC) $(CFLAGS) $< -o $@

PGMS = ship1 ship2 ship3 scope p1 p2 p3 p4 p5 p6 p7 p9 vf1 vf4 \
vd1 vd2 polym pro1 pro2 pro3 a2d polym2 abs shapes \
bound pd1 pd2 pd3 pd4 intarray pixel blockr \
p8 g1 g2 g3 lcopy1 lcopy2 \
using1 using2 using3 \
vfi1 vfi2 vc1 vc2 vc3 vc4 vcall

all: $(PGMS)
#################################################################
# Package control system
ship1: ship1.o String.o
	$(CC) $(CFLAGS) ship1.o String.o -o ship1
ship1.o: String.h
String.o: String.h

ship2: ship2.o String.o
	$(CC) $(CFLAGS) ship2.o String.o -o ship2
ship2.o: String.h

ship3: ship3.o String.o
	$(CC) $(CFLAGS) ship3.o String.o -o ship3
ship3.o: Package.h String.h
#################################################################
# Scope rules, dominance
scope: scope.o String.o
	$(CC) $(CFLAGS) scope.o String.o -o scope
scope.o: String.h
#################################################################
# Person programs
p1: p1.o String.o 
	$(CC) $(CFLAGS) p1.o String.o -o p1
p1.o: Person1.h

p2: p2.o String.o 
	$(CC) $(CFLAGS) p2.o String.o -o p2
p2.o: Person2.h

p3: p3.o String.o
	$(CC) $(CFLAGS) p3.o String.o -o p3
p3.o: Person2.h

p4: p4.o String.o
	$(CC) $(CFLAGS) p4.o String.o -o p4
p4.o: Person2.h

p5: p5.o String.o
	$(CC) $(CFLAGS) p5.o String.o -o p5
p5.o: Person2.h

p6: p6.o String.o
	$(CC) $(CFLAGS) p6.o String.o -o p6
p6.o: Person3.h

p7: p7.o String.o
	$(CC) $(CFLAGS) p7.o String.o -o p7
p7.o: Person4.h

p8: p8.o String.o
	$(CC) $(CFLAGS) p8.o String.o -o p8
p8.o: Person4.h List.h List.C PtrList.h

p9: p9.o String.o
	$(CC) $(CFLAGS) p9.o String.o -o p9
p9.o: Person5.h
#################################################################
# Polymorphic programming
polym: polym.o String.o
	$(CC) $(CFLAGS) polym.o String.o -o polym
polym.o: Person4.h Array.h Array.C

polym2: polym2.o String.o
	$(CC) $(CFLAGS) polym2.o String.o -o polym2
polym2.o: Person4.h PtrList.h List.h List.C
#################################################################
# Private programs (private derivation)
pd1: pd1.C
pd2: Array.h Array.C BArray.h
pd3: Array.h Array.C BArray.h
pd4: Array.h Array.C BArray.h

bound: bound.o String.o
	$(CC) $(CFLAGS) bound.o String.o -o bound
bound.o: BArray.h Array.h Array.C String.h
#################################################################
# Protected programs (protected derivation)
g1: Grid.h Array2dp.h Array.h Array.C
g2: SGrid.h Grid.h Array2dp.h Array.h Array.C
g3: SGrid.h Grid.h Array2dp.h Array.h Array.C
#################################################################
# Shape programs, abstract base classes
shapes: shapes.o String.o
	$(CC) $(CFLAGS) shapes.o String.o -o shapes -lm
shapes.o: Shape.h List.h List.C String.h PtrList.h

abs: abs.o String.o
	$(CC) $(CFLAGS) abs.o String.o -o abs -lm
abs.o: Shape.h String.h
#################################################################
# Virtual destructors
vd1: Base1.h Array.h Array.C
vd2: Base2.h Array.h Array.C
#################################################################
# Virtual functions
vf1: Base.h
vf4: Base4.h
#################################################################
# Virtual function implementation
vfi1: vfi1.C

vfi2: vfi2.o String.o
	$(CC) $(CFLAGS) vfi2.o String.o -o vfi2
vfi2.o: Person4.h String.h
#################################################################
# Using Declarations
using1: using1.o String.o
	$(CC) $(CFLAGS) using1.o String.o -o using1
using1.o: String.h

using2: using2.C

using3: using3.o String.o
	$(CC) $(CFLAGS) using3.o String.o -o using3
using3.o: String.h
#################################################################
# Virtual constructors
vc1: Window1.h Point5.h
vc2: Window2.h Point5.h
vc3: Window3.h Point5.h
vc4: Window3.h Point5.h
vcall: vcall.C
#################################################################
# Protected access
pro1: pro1.o
pro2: pro2.o
pro3: pro3.o
pro3.o: String.h

a2d: Arrayp.h Arrayp.C Array2d.h
#################################################################
# Templates with Inheritance
intarray: Array.h Array.C

pixel: pixel.o String.o
	$(CC) $(CFLAGS) pixel.o String.o -o pixel
pixel.o: Point3.h String.h

blockr: blockr.o String.o
	$(CC) $(CFLAGS) blockr.o String.o -o blockr
blockr.o: Block2.h String.h
#################################################################
# Deep copy semantics for List, PtrList, ListCopyA, ListCopyC classes
lcopy1: lcopy1.o String.o
	$(CC) $(CFLAGS) lcopy1.o String.o -o lcopy1
lcopy1.o: List.h List.C PtrList.h String.h ListCopy.h

lcopy2: lcopy2.o String.o
	$(CC) $(CFLAGS) lcopy2.o String.o -o lcopy2 -lm
lcopy2.o: Shape.h List.h List.C String.h PtrList.h ListCopy.h
#################################################################
clean:
	rm -rf $(PGMS)
	rm -rf a.out core *.o ii_files
