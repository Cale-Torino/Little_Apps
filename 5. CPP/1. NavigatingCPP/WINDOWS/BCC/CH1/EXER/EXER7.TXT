
                                 Exercise 7

The two scenarios depicted in Exercise 5 deal with the idea that a 
library member can reserve a book and be notified when that book 
becomes available to check out.

This suggests an additional association between LibraryMember and LibraryBook.
The object model (Figure 1.16) contains an association between LibraryMember
and LibraryBook that occurs when the LibraryMember borrows (checks out) a book.
The new association looks the same, except the association label is
"Requests" and the multiplicity is "many" since more than one library member
can request the same book. Presumably, the link attribute, request date, 
helps resolve who gets notified first.

The scenarios also suggest that a LibraryBook should have status associated with
it. This status reflects the different states of a LibraryBook: on the shelf
(available), checked out (with due date), requested (date requested, library
member who made the request), overdue (current charge), returned 
(but not yet reshelved). Note that these states are NOT mutually
exclusive. A LibraryBook can be check out, requested, and overdue all at
the same time.

The status associated with a LibraryBook seems involved enough to warrant a
separate class.

   class Book_Status { };

The object model (Figure 1.16) then requires an association between 
LibraryBook and Book_Status. Every book has a Book_Status and this status 
must be maintained by the actions that the library performs through searching 
and modifying the BookCatalog.
