<?xml version="1.0"?>
<doc>
<assembly>
<name>
WL
</name>
</assembly>
<members>
<member name="T:WL.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:WL.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:WL.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:WL.My.Resources.Resources.SteamLogo">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="M:WL.HLControl.HL辅助信息.绘制文本(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Single,System.Single,WL.HLControl.HL辅助信息.HL文本状态)">
 <summary>
 状态： 0正常白 1黄色高亮 2副文本黯淡 3禁用
 </summary>
</member>
<member name="T:WL.基础.HTTP">
 <summary>
 HTTP相关操作模块
 </summary>
</member>
<member name="T:WL.基础.HTTP.常用UserAgent">
 <summary>
 HTTP请求用的常用的浏览器UA
 </summary>
</member>
<member name="T:WL.基础.HTTP.发送HTTP">
 <summary>
 简单的发送HTTP请求并获得回应
 </summary>
</member>
<member name="M:WL.基础.HTTP.发送HTTP.#ctor(System.String,System.String)">
 <summary>
 新建一个HTTP请求
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.链接">
 <summary>
 请求用的链接
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.Accept">
 <summary>
 Accept 请求头用来告知客户端可以处理的内容类型
 默认为空
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.方法">
 <summary>
 请求用的方法 GET POST DELETE PUT 等
 默认为 GET
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.Content_Type">
 <summary>
 Content-Type 实体头部用于指示资源的MIME类型
 默认为 application/x-www-form-urlencoded; charset=UTF-8
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.UA">
 <summary>
 请求的 User-Agent
 默认为 Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_3 like Mac OS X) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.0 Mobile/14G60 Safari/602.1
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.Cookie">
 <summary>
 请求用的 cookie
 默认为空
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.Origin">
 <summary>
 Origin 首部字段表明预检请求或实际请求的源站
 默认为空
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.Referer">
 <summary>
 Referer 首部包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。
 默认为空
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.超时">
 <summary>
 设置几秒后超时
 默认为8秒
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.自定义头(System.String)">
 <summary>
 自定义请求头的集合
 </summary>
</member>
<member name="M:WL.基础.HTTP.发送HTTP.清空已写入内容">
 <summary>
 清空已经向请求内写入的各种内容
 </summary>
</member>
<member name="M:WL.基础.HTTP.发送HTTP.写入字节数组(System.Byte[])">
 <summary>
 向请求内写入字节数组
 </summary>
</member>
<member name="M:WL.基础.HTTP.发送HTTP.写入文本(System.String,System.Text.Encoding)">
 <summary>
 向请求内写入文本
 </summary>
</member>
<member name="M:WL.基础.HTTP.发送HTTP.写入FormData(WL.基础.HTTP.生成FormData)">
 <summary>
 写入FormData
 </summary>
</member>
<member name="M:WL.基础.HTTP.发送HTTP.写入multipartformdata(WL.基础.HTTP.生成multipartformdata)">
 <summary>
 写入 multipart/form-data
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.重试次数">
 <summary>
 如果请求失败，重试的次数，默认不重试
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.重试间隔时间">
 <summary>
 重试请求的时候的时间间隔，单位为秒，默认是3秒
 </summary>
</member>
<member name="P:WL.基础.HTTP.发送HTTP.预览内容(System.Boolean)">
 <summary>
 对HTTP请求内容进行预览，默认不输出请求流的内容
 </summary>
</member>
<member name="M:WL.基础.HTTP.发送HTTP.获取回应为字节数组">
 <summary>
 发送请求，获取回应并读取为字节数组，如果出错会返回nothing
 </summary>
</member>
<member name="M:WL.基础.HTTP.发送HTTP.获取回应为字符串(System.Text.Encoding,System.Boolean,System.Boolean)">
 <summary>
 发送请求，获取回应并读取为字符串，如果出错会返回错误信息的字符串
 默认不去除引号，但默认反转义
 </summary>
</member>
<member name="T:WL.基础.HTTP.生成FormData">
 <summary>
 HTTP请求用的 FormData 生成器
 </summary>
</member>
<member name="M:WL.基础.HTTP.生成FormData.#ctor(System.String[])">
 <summary>
 新建一个生成器并写入内容
 </summary>
</member>
<member name="M:WL.基础.HTTP.生成FormData.写入(System.String[])">
 <summary>
 写入内容
 </summary>
</member>
<member name="M:WL.基础.HTTP.生成FormData.ToString">
 <summary>
 输出 FormData 原文
 </summary>
</member>
<member name="T:WL.基础.HTTP.生成multipartformdata">
 <summary>
 HTTP请求用的 multipart/form-data 生成器
 </summary>
</member>
<member name="M:WL.基础.HTTP.生成multipartformdata.#ctor(System.String,System.Text.Encoding)">
 <summary>
 新建一个 multipart/form-data 生成器，支持自定义分隔符和自定义编码
 </summary>
</member>
<member name="P:WL.基础.HTTP.生成multipartformdata.分隔符">
 <summary>
 返回随机生成的 boundary
 </summary>
</member>
<member name="M:WL.基础.HTTP.生成multipartformdata.写入参数(System.String,System.String,System.String)">
 <summary>
 写入一个参数，默认不写类型，无需对写入内容进行URL编码
 </summary>
</member>
<member name="M:WL.基础.HTTP.生成multipartformdata.写入字节数组(System.String,System.String,System.String,System.Byte[])">
 <summary>
 写入字节数组
 </summary>
</member>
<member name="M:WL.基础.HTTP.生成multipartformdata.写入文件(System.String,System.String,System.String)">
 <summary>
 读取文件的二进制内容并写入
 </summary>
</member>
<member name="P:WL.基础.HTTP.生成multipartformdata.实际生成内容">
 <summary>
 返回实际生成的内容，HTTP请求用
 </summary>
</member>
<member name="M:WL.基础.HTTP.生成multipartformdata.ToString">
 <summary>
 返回生成内容的预览文本
 </summary>
</member>
<member name="T:WL.基础.WSave配置文件">
 <summary>
 WSave配置文件的模块
 </summary>
</member>
<member name="T:WL.基础.WSave配置文件.WSave">
 <summary>
 WSave配置文件
 </summary>
</member>
<member name="P:WL.基础.WSave配置文件.WSave.本地文件">
 <summary>
 本地文件的位置，通常为 .wsave 后缀
 </summary>
</member>
<member name="M:WL.基础.WSave配置文件.WSave.#ctor(System.String)">
 <summary>
 新建一个WSave配置文件类
 </summary>
</member>
<member name="M:WL.基础.WSave配置文件.WSave.密钥冲突(System.String)">
 <summary>
 测试该外部密钥是否和内部密钥一样
 </summary>
</member>
<member name="M:WL.基础.WSave配置文件.WSave.从文件读取">
 <summary>
 清空，并从本地读取文件
 </summary>
</member>
<member name="M:WL.基础.WSave配置文件.WSave.保存到本地">
 <summary>
 保存内容到本地文件
 </summary>
</member>
<member name="P:WL.基础.WSave配置文件.WSave.字符串(System.String,System.String)">
 <summary>
 从配置文件里读取或写入字符串
 </summary>
</member>
<member name="P:WL.基础.WSave配置文件.WSave.非空(System.String)">
 <summary>
 从配置文件里检查是否有这个名字的值
 </summary>
</member>
<member name="P:WL.基础.WSave配置文件.WSave.数字(System.String,System.Double)">
 <summary>
 从配置文件里读取或写入数字
 </summary>
</member>
<member name="P:WL.基础.WSave配置文件.WSave.真假(System.String,System.Boolean)">
 <summary>
 从配置文件里读取或写入真假
 </summary>
</member>
<member name="P:WL.基础.WSave配置文件.WSave.日期(System.String,System.DateTime)">
 <summary>
 从配置文件里读取或写入日期
 </summary>
</member>
<member name="M:WL.基础.WSave配置文件.WSave.绑定控件(System.Windows.Forms.Control,WL.基础.WSave配置文件.控件值类型,System.Object)">
 <summary>
 把值与控件绑定，一个控件只能有一个值，绑定的时候读取值，窗口关闭的时候保存值
 </summary>
</member>
<member name="M:WL.基础.WSave配置文件.WSave.生成控件读取(System.Windows.Forms.Control)">
 <summary>
 绑定控件的时候的内部ID
 </summary>
</member>
<member name="T:WL.基础.WSave配置文件.控件值类型">
 <summary>
 Wsave控件绑定的时候用的控件值类型，注意Value视作为数字类型
 </summary>
</member>
<member name="T:WL.基础.图片">
 <summary>
 图片处理模块
 </summary>
</member>
<member name="M:WL.基础.图片.裁剪(System.Drawing.Bitmap,System.Drawing.Rectangle)">
 <summary>
 把图片的指定范围裁剪出来成新的图片
 </summary>
</member>
<member name="M:WL.基础.图片.获取帧数(System.Drawing.Bitmap)">
 <summary>
 获取Bitmap的帧数，普通图片帧数为1
 </summary>
</member>
<member name="M:WL.基础.图片.获取图片编码器(System.Drawing.Imaging.ImageFormat)">
 <summary>
 根据图片格式，获取 ImageCodecInfo 的 Encoder
 </summary>
</member>
<member name="M:WL.基础.图片.图片转字节数组(System.Drawing.Bitmap)">
 <summary>
 把图片变成字节数组，只保存PNG
 </summary>
</member>
<member name="M:WL.基础.图片.字节数组转图片(System.Byte[])">
 <summary>
 把字节数组变成图片，只支持单帧
 </summary>
</member>
<member name="M:WL.基础.图片.读图片文件(System.String)">
 <summary>
 把图片文件进行读取，并且不占用实际的本地文件 
 </summary>
</member>
<member name="T:WL.基础.字符串常量">
 <summary>
 一些字符串常量
 </summary>
</member>
<member name="F:WL.基础.字符串常量.简体字2k">
 <summary>
 2332个常用简体字
 </summary>
</member>
<member name="F:WL.基础.字符串常量.繁体字2k">
 <summary>
 2331个常用繁体字
 </summary>
</member>
<member name="F:WL.基础.字符串常量.汉字">
 <summary>
 所有的汉字，包括简体和繁体，10512个字
 </summary>
</member>
<member name="F:WL.基础.字符串常量.小写英文字母">
 <summary>
 26个小写字母
 </summary>
</member>
<member name="F:WL.基础.字符串常量.大写英文字母">
 <summary>
 26个大写字母
 </summary>
</member>
<member name="F:WL.基础.字符串常量.阿拉伯数字">
 <summary>
 10个阿拉伯数字
 </summary>
</member>
<member name="F:WL.基础.字符串常量.引号">
 <summary>
 英文引号
 </summary>
</member>
<member name="T:WL.基础.引用">
 <summary>
 引用其他的DLL的函数，并封装好一些常用的用法
 </summary>
</member>
<member name="M:WL.基础.引用.拖动窗口(System.Windows.Forms.Form)">
 <summary>
 对窗口进行拖放，通常用于无边框的窗体，写在MouseDown事件里使用
 </summary>
</member>
<member name="M:WL.基础.引用.滚动(System.Windows.Forms.Control,System.Boolean,System.Int32)">
 <summary>
 对控件发送滚动信号，使用 EM_LINESCROLL 
 </summary>
</member>
<member name="M:WL.基础.引用.获得文本框行数(System.Windows.Forms.Control)">
 <summary>
 获得文本框的行数，使用 EM_LINEINDEX 
 </summary>
</member>
<member name="M:WL.基础.引用.获取IEcookie(System.String)">
 <summary>
 从IE浏览器里获得指定网站的Cookie，网站应该是http://或者https://开头的完整链接
 </summary>
</member>
<member name="T:WL.基础.数学">
 <summary>
 数学相关的模块
 </summary>
</member>
<member name="M:WL.基础.数学.是整数(System.Object)">
 <summary>
 判断这个数字是否为整数
 </summary>
</member>
<member name="M:WL.基础.数学.是小数(System.Object)">
 <summary>
 判断这个数字是否为小数
 </summary>
</member>
<member name="M:WL.基础.数学.是偶数(System.Object)">
 <summary>
 判断这个数字是否为偶整数
 </summary>
</member>
<member name="M:WL.基础.数学.是奇数(System.Object)">
 <summary>
 判断这个数字是否为奇整数
 </summary>
</member>
<member name="T:WL.基础.数学.随机">
 <summary>
 随机生成一些物品的类
 </summary>
</member>
<member name="M:WL.基础.数学.随机.小数">
 <summary>
 随机获得一个0到0.9999之间的小数
 </summary>
</member>
<member name="M:WL.基础.数学.随机.真假">
 <summary>
 随机获得True或False
 </summary>
</member>
<member name="M:WL.基础.数学.随机.整数(System.Int32,System.Int32)">
 <summary>
 获得指定范围内的一个整数
 </summary>
</member>
<member name="M:WL.基础.数学.随机.当中一个(System.Object[])">
 <summary>
 获得列表当中的随机一个物品
 </summary>
</member>
<member name="M:WL.基础.数学.随机.当中字符(System.String,System.UInt32)">
 <summary>
 随机获得文本当中的指定个数个字符，可能会重复，默认为1个
 </summary>
</member>
<member name="M:WL.基础.数学.随机.阿拉伯数字(System.UInt32)">
 <summary>
 返回指定个阿拉伯数字组成的字符串
 </summary>
</member>
<member name="M:WL.基础.数学.随机.西文(System.UInt32)">
 <summary>
 返回指定个阿拉伯数字、小写英文字母、大写英文字母组成的字符串
 </summary>
</member>
<member name="M:WL.基础.数学.随机.简体汉字(System.UInt32)">
 <summary>
 返回指定个简体汉字组成的字符串
 </summary>
</member>
<member name="M:WL.基础.数学.随机.繁体汉字(System.UInt32)">
 <summary>
 返回指定个简体汉字组成的字符串
 </summary>
</member>
<member name="M:WL.基础.数学.随机.英文字母(System.UInt32)">
 <summary>
 返回指定个小写英文字母、大写英文字母组成的字符串
 </summary>
</member>
<member name="M:WL.基础.数学.随机.小写英文字母(System.UInt32)">
 <summary>
 返回指定个小写英文字母组成的字符串
 </summary>
</member>
<member name="M:WL.基础.数学.随机.大写英文字母(System.UInt32)">
 <summary>
 返回指定个大写英文字母组成的字符串
 </summary>
</member>
<member name="M:WL.基础.数学.十进制转(System.UInt32,System.UInt16)">
 <summary>
 把十进制数转为其他进制的字符串，最大36进制
 </summary>
</member>
<member name="M:WL.基础.数学.转十进制(System.String,System.UInt16)">
 <summary>
 把其他进制的数字字符串变成十进制的Ulong
 </summary>
</member>
<member name="T:WL.基础.文件">
 <summary>
 文件信息处理模块
 </summary>
</member>
<member name="M:WL.基础.文件.路径标准化(System.String)">
 <summary>
 把路径进行标准化处理，最后带一个\
 </summary>
</member>
<member name="M:WL.基础.文件.是合法文件名(System.String)">
 <summary>
 判断这个文件名或者文件夹名当中是否包含非法字符
 </summary>
</member>
<member name="M:WL.基础.文件.盘符(System.String)">
 <summary>
 返回文本当中的小写盘符
 </summary>
</member>
<member name="M:WL.基础.文件.文件路径(System.String)">
 <summary>
 如果是文件夹就返回上层路径，如果是文件就返回路径
 </summary>
</member>
<member name="M:WL.基础.文件.文件名(System.String,System.Boolean)">
 <summary>
 如果是文件夹就返回文件夹名，如果是文件就返回文件名，默认包括后缀
 </summary>
</member>
<member name="M:WL.基础.文件.文件后缀(System.String)">
 <summary>
 返回文件的小写后缀，包括第一个点
 </summary>
</member>
<member name="M:WL.基础.文件.文件存在(System.String)">
 <summary>
 检查这个文件是否存在 
 </summary>
</member>
<member name="M:WL.基础.文件.文件夹存在(System.String)">
 <summary>
 检查这个文件夹是否存在 
 </summary>
</member>
<member name="M:WL.基础.文件.文件大小Byte(System.String)">
 <summary>
 返回这个文件的大小，单位为Byte，如果文件不存在则返回0
 </summary>
</member>
<member name="M:WL.基础.文件.文件大小KB(System.String)">
 <summary>
 返回这个文件的大小，单位为KB，如果文件不存在则返回0
 </summary>
</member>
<member name="M:WL.基础.文件.文件大小MB(System.String)">
 <summary>
 返回这个文件的大小，单位为MB，如果文件不存在则返回0
 </summary>
</member>
<member name="M:WL.基础.文件.文件大小文字(System.String)">
 <summary>
 读取文件大小，并自动选择合适的单位返回一个字符串，只保留整数
 </summary>
</member>
<member name="M:WL.基础.文件.文件大小文字(System.Int64)">
 <summary>
 根据long值，单位应该为B，自动选择合适的单位返回一个字符串，只保留整数
 </summary>
</member>
<member name="M:WL.基础.文件.读文件为字节数组(System.String)">
 <summary>
 读取文件的内容为字节数组，如果无法读取，则返回nothing
 </summary>
</member>
<member name="M:WL.基础.文件.读文件为文本(System.String,System.Text.Encoding)">
 <summary>
 读取文件的内容为字符串，并且会进行标准化处理
 </summary>
</member>
<member name="M:WL.基础.文件.删除文件(System.String)">
 <summary>
 删除文件或文件夹，返回删除是否成功，如果不存在也算删除成功
 </summary>
</member>
<member name="M:WL.基础.文件.创建文件夹(System.String)">
 <summary>
 尝试创建文件夹，返回文件夹是否已经成功存在
 </summary>
</member>
<member name="M:WL.基础.文件.写字节数组到文件(System.String,System.Byte[])">
 <summary>
 删除文件，然后重新写入对应的字节数组，返回是否写入成功
 </summary>
</member>
<member name="M:WL.基础.文件.写文本到文件(System.String,System.String,System.Text.Encoding)">
 <summary>
 删除文件，然后重新写入对应的文本，返回是否写入成功
 </summary>
</member>
<member name="M:WL.基础.文件.路径拆分(System.String)">
 <summary>
 把路径拆分开来
 </summary>
</member>
<member name="M:WL.基础.文件.文件复制重命名(System.String,System.String)">
 <summary>
 复制文件到新文件夹并重命名，并返回是否复制成功
 </summary>
</member>
<member name="M:WL.基础.文件.文件复制(System.String,System.String)">
 <summary>
 复制文件到新文件夹，并返回是否复制成功
 </summary>
</member>
<member name="T:WL.基础.文本">
 <summary>
 文本处理模块
 </summary>
</member>
<member name="M:WL.基础.文本.文本标准化(System.String@)">
 <summary>
 对文本进行标准化处理，包括修正CRLF，把多余的控制符替换为空格，把tab换成4个空格
 </summary>
</member>
<member name="M:WL.基础.文本.包含(System.String,System.String[])">
 <summary>
 检查文本内是否包含要寻找的内容的当中一项
 </summary>
</member>
<member name="M:WL.基础.文本.包含全部(System.String,System.String[])">
 <summary>
 检查文本内是否包含要寻找的内容的每一项
 </summary>
</member>
<member name="M:WL.基础.文本.替换(System.String,System.String[])">
 <summary>
 一一对应替换掉文本中的相关内容
 </summary>
</member>
<member name="M:WL.基础.文本.左(System.String,System.UInt32)">
 <summary>
 返回文本左边指定长度的字符串
 </summary>
</member>
<member name="M:WL.基础.文本.右(System.String,System.UInt32)">
 <summary>
 返回文本右边指定长度的字符串
 </summary>
</member>
<member name="M:WL.基础.文本.去右(System.String,System.UInt32)">
 <summary>
 返回文本去掉右边指定长度的字符串
 </summary>
</member>
<member name="M:WL.基础.文本.去左(System.String,System.UInt32)">
 <summary>
 返回文本去掉左边指定长度的字符串
 </summary>
</member>
<member name="M:WL.基础.文本.头(System.String,System.String[])">
 <summary>
 检查文本是否以相关内容开头
 </summary>
</member>
<member name="M:WL.基础.文本.尾(System.String,System.String[])">
 <summary>
 检查文本是否以相关内容结尾
 </summary>
</member>
<member name="M:WL.基础.文本.提取之后(System.String,System.String[])">
 <summary>
 从前向后寻找，提取需要寻找的全部字符串之后的文本，如果不存在要寻找的就返回空字符串
 </summary>
</member>
<member name="M:WL.基础.文本.提取之前(System.String,System.String[])">
 <summary>
 从后向前寻找，提取需要寻找的全部字符串之前的文本，如果不存在要寻找的就返回空字符串
 </summary>
</member>
<member name="M:WL.基础.文本.提取最之前(System.String,System.String)">
 <summary>
 从前向后寻找，第一次找到要寻找的字符串之后提取之前的部分
 </summary>
</member>
<member name="M:WL.基础.文本.提取最之后(System.String,System.String)">
 <summary>
 从后向前寻找，第一次找到要寻找的字符串之后提取之后的部分
 </summary>
</member>
<member name="M:WL.基础.文本.提取之间(System.String,System.String,System.String)">
 <summary>
 提取文本当中指定开头和结尾之间的文字，开头是第一次出现的那个开头，结尾是开头之后出现的第一次结尾
 </summary>
</member>
<member name="M:WL.基础.文本.去除(System.String,System.String[])">
 <summary>
 从文本中去除对应的内容
 </summary>
</member>
<member name="M:WL.基础.文本.去回车(System.String,System.String)">
 <summary>
 去掉文本中的 CR LF 或者替换成指定内容
 </summary>
</member>
<member name="M:WL.基础.文本.去重(System.String)">
 <summary>
 去掉文本中，重复存在的字符
 </summary>
</member>
<member name="M:WL.基础.文本.无BOM的UTF8编码">
 <summary>
 没有 BOM 标识的 UTF-8 编码
 </summary>
 <returns></returns>
</member>
<member name="M:WL.基础.文本.文本转字节数组(System.String,System.Text.Encoding)">
 <summary>
 把文本转为字节数组
 </summary>
</member>
<member name="M:WL.基础.文本.字节数组转文本(System.Byte[],System.Text.Encoding)">
 <summary>
 把字节数组转为文本，并且会进行标准化处理
 </summary>
</member>
<member name="M:WL.基础.文本.去连续重复(System.String,System.String[])">
 <summary>
 如果文本里存在连续2个及以上个数的内容，就替换成只有一个
 </summary>
</member>
<member name="M:WL.基础.文本.分割(System.String,System.String,System.Boolean)">
 <summary>
 把文本进行分割并生成列表，如果不包含间隔字符串，就返回本体，不保留中间的零长度内容，且默认自动trim每一项内容
 </summary>
</member>
<member name="M:WL.基础.文本.分行(System.String,System.Boolean)">
 <summary>
 把文本内的每一行都提取出来生成一个列表，默认把空的行也算在内
 </summary>
</member>
<member name="M:WL.基础.文本.筛选字符(System.String,System.String)">
 <summary>
 筛选文本中的字符，如果不是规定的字符，那就去除
 </summary>
</member>
<member name="M:WL.基础.文本.仅数字(System.String)">
 <summary>
 提取文字中的数字
 </summary>
</member>
<member name="M:WL.基础.文本.仅字母(System.String)">
 <summary>
 提取文字中的字母，大小写不限
 </summary>
</member>
<member name="M:WL.基础.文本.仅大写字母(System.String)">
 <summary>
 提取文字中的大写字母
 </summary>
</member>
<member name="M:WL.基础.文本.仅小写字母(System.String)">
 <summary>
 提取文字中的小写字母
 </summary>
</member>
<member name="M:WL.基础.文本.引(System.String)">
 <summary>
 把文本变成 "文本"
 </summary>
</member>
<member name="M:WL.基础.文本.字典转文本(System.Collections.IDictionary,System.String)">
 <summary>
 把字典的每一项的名字和值tostring都转成一行，连接符默认是:，然后拼在一起
 </summary>
</member>
<member name="M:WL.基础.文本.列表转文本(System.Object)">
 <summary>
 把列表的每一项的tostring都转成一行，然后拼在一起
 </summary>
</member>
<member name="M:WL.基础.文本.URL编码(System.String)">
 <summary>
 对字符串进行URLencode
 </summary>
</member>
<member name="M:WL.基础.文本.URL解码(System.String)">
 <summary>
 对字符串进行URLdncode
 </summary>
</member>
<member name="M:WL.基础.文本.反转义(System.String)">
 <summary>
 对转义后的文本进行反转义
 </summary>
</member>
<member name="M:WL.基础.文本.数组拼接文本(System.String,System.Object[])">
 <summary>
 把数组里的每一项.ToString拼接起来，其中中间是指定的连接符
 </summary>
</member>
<member name="M:WL.基础.文本.数组拼接文本(System.String[])">
 <summary>
 把数组里的每一项.ToString拼接起来
 </summary>
</member>
<member name="M:WL.基础.文本.重复(System.String,System.UInt32)">
 <summary>
 把文本重复几次后返回
 </summary>
</member>
<member name="M:WL.基础.文本.补左(System.String,System.UInt32,System.String)">
 <summary>
 如果长度不足，就用指定的字符串补充在左边直到长度达标
 </summary>
 <returns></returns>
</member>
<member name="M:WL.基础.文本.补右(System.String,System.UInt32,System.String)">
 <summary>
 如果长度不足，就用指定的字符串补充在右边直到长度达标
 </summary>
 <returns></returns>
</member>
<member name="T:WL.基础.文本.Base64">
 <summary>
 Base64加密解密类
 </summary>
</member>
<member name="M:WL.基础.文本.Base64.加密字节数组(System.Byte[])">
 <summary>
 对字节数组进行加密
 </summary>
</member>
<member name="M:WL.基础.文本.Base64.加密文本(System.String,System.Text.Encoding)">
 <summary>
 对字符串进行加密
 </summary>
</member>
<member name="M:WL.基础.文本.Base64.解密字节数组(System.String)">
 <summary>
 对Base64字符串进行解密，解密到字节数组
 </summary>
</member>
<member name="M:WL.基础.文本.Base64.解密文本(System.String,System.Text.Encoding)">
 <summary>
 对Base64字符串进行解密，解密到字符串
 </summary>
</member>
<member name="T:WL.基础.文本.正则">
 <summary>
 一些比原版更好的正则处理，规则为大小写、多行模式，\r和\n都可以表示换行，无需特别注意
 </summary>
</member>
<member name="M:WL.基础.文本.正则.是正确表达式(System.String)">
 <summary>
 判断这个正则表达式是否正确，如果长度为0算false
 </summary>
</member>
<member name="M:WL.基础.文本.正则.替换(System.String,System.String[])">
 <summary>
 正则替换内容
 </summary>
</member>
<member name="M:WL.基础.文本.正则.去除(System.String,System.String[])">
 <summary>
 把文本中符合表达式的部分都去除
 </summary>
</member>
<member name="M:WL.基础.文本.正则.包含(System.String,System.String[])">
 <summary>
 文本当中是否可以匹配到表达式当中的一个
 </summary>
</member>
<member name="M:WL.基础.文本.正则.检索第一个(System.String,System.String)">
 <summary>
 相当于 Regex.Match ，返回的是字符串，
 </summary>
</member>
<member name="M:WL.基础.文本.正则.检索(System.String,System.String)">
 <summary>
 相当于 Regex.Matches
 </summary>
</member>
<member name="M:WL.基础.文本.正则.检索(System.String,System.String,System.UInt32)">
 <summary>
 检索后直接返回对应序号个的内容，序号从0开始
 </summary>
</member>
<member name="M:WL.基础.文本.正则.分块(System.String,System.String)">
 <summary>
 把文本进行分块，不匹配表达式的一块，匹配表达式的一块，组成一个列表
 </summary>
</member>
<member name="M:WL.基础.文本.正则.高级替换(System.String,System.String,System.Func{System.String,System.String})">
 <summary>
 把匹配到的表达式进行处理后，替换回文本当中
 </summary>
</member>
<member name="M:WL.基础.文本.正则.高级分块(System.String,System.String,System.Func{System.String,System.String},System.Func{System.String,System.String})">
 <summary>
 把文本分块，然后匹配的进行一个处理，非匹配的进行另外一个处理
 </summary>
</member>
<member name="M:WL.基础.文本.Markdown转HTML(System.String)">
 <summary>
 把Markdown文本转为HTML，不支持同一语法的多层嵌套（比如列表里面嵌套一层列表）
 </summary>
</member>
<member name="M:WL.基础.文本.压缩HTML(System.String)">
 <summary>
 对HTML进行压缩，请尽量保证提供的内容是正确的
 </summary>
</member>
<member name="M:WL.基础.文本.压缩CSS(System.String)">
 <summary>
 对CSS进行压缩，请尽量保证提供的内容是正确的
 </summary>
</member>
<member name="M:WL.基础.文本.压缩JS(System.String)">
 <summary>
 对JavaScript进行压缩，请尽量保证提供的内容是正确的
 </summary>
</member>
<member name="M:WL.基础.文本.比较文本(System.String,System.String)">
 <summary>
 比较两个文本，一个字一个字的比，如果A比B小，就返回-1，等于返回0，大于返回1
 </summary>
</member>
<member name="T:WL.基础.文本.走過去加密">
 <summary>
 戈登走過去的加密法
 </summary>
</member>
<member name="M:WL.基础.文本.走過去加密.#ctor(System.String)">
 <summary>
 新建一个加解密，并使用指定的密钥，如果密钥不正确则会自动生成一个，密钥应该是5-30个简体汉字
 </summary>
</member>
<member name="M:WL.基础.文本.走過去加密.#ctor">
 <summary>
 新建一个加解密，并自动生成一个密钥
 </summary>
</member>
<member name="P:WL.基础.文本.走過去加密.密钥">
 <summary>
 获取或设置密钥
 </summary>
</member>
<member name="M:WL.基础.文本.走過去加密.加密(System.Byte[])">
 <summary>
 把字节数组进行加密
 </summary>
</member>
<member name="M:WL.基础.文本.走過去加密.加密(System.String)">
 <summary>
 对UTF8字符串进行加密
 </summary>
</member>
<member name="M:WL.基础.文本.走過去加密.解密为字节数组(System.String)">
 <summary>
 对密文进行解密，输出为字节数组 
 </summary>
</member>
<member name="M:WL.基础.文本.走過去加密.解密为字符串(System.String)">
 <summary>
 解密密文到UTF8字符串
 </summary>
</member>
<member name="T:WL.基础.文本.数据登记表">
 <summary>
 对数据进行逐行登记用的
 </summary>
</member>
<member name="P:WL.基础.文本.数据登记表.连接符">
 <summary>
 连接用的连接符
 </summary>
</member>
<member name="P:WL.基础.文本.数据登记表.忽略空内容">
 <summary>
 如果加入的内容是空的，那么是否还要加入
 </summary>
</member>
<member name="M:WL.基础.文本.数据登记表.#ctor(System.String,System.Boolean)">
 <summary>
 新建数据登记表，定义连接文本，默认为: 来连接
 </summary>
</member>
<member name="M:WL.基础.文本.数据登记表.增加(System.String)">
 <summary>
 增加一行内容
 </summary>
</member>
<member name="M:WL.基础.文本.数据登记表.增加(System.String,System.String)">
 <summary>
 增加一行内容，标题 + 连接符 + 内容
 </summary>
</member>
<member name="M:WL.基础.文本.数据登记表.ToString">
 <summary>
 输出采集的数据
 </summary>
</member>
<member name="T:WL.基础.时间">
 <summary>
 和时间日期有关的模块
 </summary>
</member>
<member name="M:WL.基础.时间.转时间戳(System.DateTime,System.Boolean)">
 <summary>
 把时间转换为 UNIX 时间，默认不包括毫秒（毫秒是伪造的）
 </summary>
</member>
<member name="M:WL.基础.时间.当日时间戳">
 <summary>
 返回 Microsoft.VisualBasic.Timer 自午夜以来经过的值，该值表示的秒数。
 </summary>
</member>
<member name="M:WL.基础.时间.当前时间戳(System.Boolean)">
 <summary>
 把当前时间转换为 UNIX 时间，精确到秒
 </summary>
</member>
<member name="M:WL.基础.时间.时间戳转出(System.UInt64)">
 <summary>
 把时间戳变成 DateTime，只支持秒级别的时间戳
 </summary>
</member>
<member name="M:WL.基础.时间.时间格式化(System.DateTime,System.String)">
 <summary>
 把时间格式化后输出字符串，用Y年，M月，D天，h时，m分钟，s秒，并且年强制为4位数字，其他强制为2位数字
 </summary>
</member>
<member name="M:WL.基础.时间.时间文字(System.Int64,System.Boolean)">
 <summary>
 把秒数变成时间文字，默认从秒起步
 </summary>
</member>
<member name="M:WL.基础.时间.过频(System.Int32,System.Double)">
 <summary>
 如果同一个ID访问这个函数的时间间隔过小，就返回true
 </summary>
</member>
<member name="T:WL.基础.流">
 <summary>
 针对 stream 进行处理的模块
 </summary>
</member>
<member name="M:WL.基础.流.读取完整流(System.IO.Stream)">
 <summary>
 读取该stream一直到末尾，输出字节数组，这并不会关闭流
 </summary>
</member>
<member name="M:WL.基础.流.读至零返回字符串(System.IO.Stream,System.Text.Encoding)">
 <summary>
 读取流直到0字节或者流的末尾，然后输出该部分的字符串，这并不会关闭流
 </summary>
</member>
<member name="T:WL.基础.程序">
 <summary>
 与本程序还有其他程序的相关操作的模块
 </summary>
</member>
<member name="T:WL.基础.程序.本程序">
 <summary>
 本程序的相关信息
 </summary>
</member>
<member name="P:WL.基础.程序.本程序.进程">
 <summary>
 获取本程序的Process类
 </summary>
</member>
<member name="P:WL.基础.程序.本程序.PID">
 <summary>
 获得本程序的PID
 </summary>
 <returns></returns>
</member>
<member name="P:WL.基础.程序.本程序.路径">
 <summary>
 获取本程序的文件路径
 </summary>
 <returns></returns>
</member>
<member name="P:WL.基础.程序.本程序.文件名">
 <summary>
 获得本程序的文件名，不包含.exe
 </summary>
 <returns></returns>
</member>
<member name="M:WL.基础.程序.本程序.重启">
 <summary>
 重启本程序
 </summary>
</member>
<member name="M:WL.基础.程序.本程序.退出">
 <summary>
 退出本程序
 </summary>
</member>
<member name="P:WL.基础.程序.本程序.控制台输出">
 <summary>
 是否以 Console.Writeline 来操作输出 sub
 </summary>
 <returns></returns>
</member>
<member name="M:WL.基础.程序.本程序.真的运行中">
 <summary>
 检查本程序是否真的在运行中
 </summary>
</member>
<member name="P:WL.基础.程序.本程序.图标">
 <summary>
 获得本程序的主文件图标
 </summary>
</member>
<member name="M:WL.基础.程序.输出(System.Object[])">
 <summary>
 Debug.Print 输出信息，也可以 Console.Writeline
 </summary>
</member>
<member name="M:WL.基础.程序.中断线程(System.Threading.Thread[])">
 <summary>
 把线程强制中断
 </summary>
</member>
<member name="M:WL.基础.程序.打开程序(System.String,System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean,System.Boolean,System.UInt32)">
 <summary>
 打开一个程序，超时选项只有在等到运行结束为True的时候才会工作
 </summary>
</member>
<member name="M:WL.基础.程序.程序运行中(System.String)">
 <summary>
 判断该名字的程序是否在运行中，无需.exe
 </summary>
</member>
<member name="E:WL.基础.程序.WL出错">
 <summary>
 出错的时候会呼叫这个event
 </summary>
</member>
<member name="M:WL.基础.程序.出错(System.Object[])">
 <summary>
 出错的时候会call这个sub
 </summary>
</member>
<member name="M:WL.基础.程序.计时">
 <summary>
 输出一条计时，包括距离上次计时的间距
 </summary>
</member>
<member name="M:WL.基础.程序.PowerShell运行脚本(System.String)">
 <summary>
 运行Powershell脚本，并返回运行结果，只能是全自动脚本，不然会卡住
 </summary>
</member>
<member name="T:WL.基础.程序.计时器">
 <summary>
 一个用窗体线程的 Timer
 </summary>
</member>
<member name="M:WL.基础.程序.计时器.#ctor(System.Int32,System.EventHandler)">
 <summary>
 新建一个用窗体线程的 Timer，不会自动启动
 </summary>
</member>
<member name="M:WL.基础.程序.计时器.Dispose">
 <summary>
 释放 Timer 的资源
 </summary>
</member>
<member name="P:WL.基础.程序.计时器.间隔">
 <summary>
 间隔，也就是 Interval，单位为毫秒，如果设置的比1还小就会直接停止工作，并且需要手动重启
 </summary>
</member>
<member name="P:WL.基础.程序.计时器.启用">
 <summary>
 也就是 Enabled
 </summary>
</member>
<member name="M:WL.基础.程序.计时器.新增事件(System.EventHandler)">
 <summary>
 新增一个计时器时间到的时候会进行的事件，无法删除老事件，只能删除本计时器后重新做一个
 </summary>
</member>
<member name="P:WL.基础.程序.计时器.工作次数">
 <summary>
 工作几次后会自动停止
 </summary>
</member>
<member name="T:WL.基础.程序.系统文件对话框">
 <summary>
 使用系统的文件对话框选取文件文件夹
 </summary>
</member>
<member name="M:WL.基础.程序.系统文件对话框.打开文件(System.String)">
 <summary>
 打开窗口并选择一个文件，过滤写法是 Text files (*.txt)|*.txt|All files (*.*)|*.*
 </summary>
</member>
<member name="M:WL.基础.程序.系统文件对话框.打开多个文件(System.String)">
 <summary>
 打开窗口并选择多个文件，过滤写法是 Text files (*.txt)|*.txt|All files (*.*)|*.*
 </summary>
</member>
<member name="M:WL.基础.程序.系统文件对话框.打开文件夹">
 <summary>
 打开窗口并选择单个文件夹
 </summary>
</member>
<member name="M:WL.基础.程序.系统文件对话框.保存文件(System.String)">
 <summary>
 打开窗口并保存单个文件，过滤写法是 Text files (*.txt)|*.txt|All files (*.*)|*.*
 </summary>
</member>
<member name="T:WL.基础.类型">
 <summary>
 类型判断、转换、选择、比较的模块
 </summary>
</member>
<member name="M:WL.基础.类型.是整数类型(System.Type)">
 <summary>
 判断这个类型是否是整数类型 Byte Integer UInteger Long ULong Short UShort Decimal 
 并不判断其内容是否真的是整数
 </summary>
</member>
<member name="M:WL.基础.类型.是小数(System.Type)">
 <summary>
 判断这个类型是否是小数类型 Single Double
 并不判断其内容是否真的是小数
 </summary>
</member>
<member name="M:WL.基础.类型.是数字(System.Type)">
 <summary>
 判断这个类型是否是 Byte Integer UInteger Long ULong Short UShort Decimal Single Double
 </summary>
</member>
<member name="M:WL.基础.类型.是字符串(System.Type)">
 <summary>
 判断这个类型是否是字符串 String Char
 </summary>
</member>
<member name="M:WL.基础.类型.是集合(System.Type)">
 <summary>
 判断这个类型是否是 ICollection, IList, IDictionary, IEnumerable 的一个子类
 </summary>
</member>
<member name="M:WL.基础.类型.是同一继承类(System.Type,System.Type)">
 <summary>
 判断t类型是否继承自parent类型
 </summary>
</member>
<member name="M:WL.基础.类型.是控件(System.Type)">
 <summary>
 判断t类型是否是控件
 </summary>
</member>
<member name="M:WL.基础.类型.有Length(System.Type)">
 <summary>
 判断这个类型是否有Length属性
 </summary>
</member>
<member name="M:WL.基础.类型.有Count(System.Type)">
 <summary>
 判断这个类型是否有Count属性
 </summary>
</member>
<member name="M:WL.基础.类型.有LengthCount(System.Type)">
 <summary>
 判断这个类型是否有Count属性
 </summary>
</member>
<member name="M:WL.基础.类型.为空(System.Object)">
 <summary>
 判断这个对象是否为空
 数字判断是否为0
 有Length或者Count就判断是否为0
 是颜色判断是否为 Color.Empty
 是控件就判断 IsHandleCreated = False
 </summary>
</member>
<member name="M:WL.基础.类型.为空(System.Object[])">
 <summary>
 判断这些对象中是否有一个为空
 </summary>
</member>
<member name="M:WL.基础.类型.为空全部(System.Object[])">
 <summary>
 判断这些对象中是否全部为空
 </summary>
</member>
<member name="M:WL.基础.类型.非空(System.Object)">
 <summary>
 判断这个对象是否非空
 </summary>
</member>
<member name="M:WL.基础.类型.非空(System.Object[])">
 <summary>
 判断这些对象中是否有一个非空
 </summary>
</member>
<member name="M:WL.基础.类型.非空全部(System.Object[])">
 <summary>
 判断这些对象中是否全部非空
 </summary>
</member>
<member name="T:WL.基础.类型.比较方法">
 <summary>
 比较两个东西之间是否相等的办法
 </summary>
</member>
<member name="F:WL.基础.类型.比较方法.等于">
 <summary>
 直接使用 = 来比较
 </summary>
</member>
<member name="F:WL.基础.类型.比较方法.HashCode">
 <summary>
 只比较两个对象的 HashCode 是否相等
 </summary>
</member>
<member name="F:WL.基础.类型.比较方法.Tostring">
 <summary>
 只比较对象的 Tostring 是否相等
 </summary>
</member>
<member name="F:WL.基础.类型.比较方法.Equals">
 <summary>
 使用 Equals 来比较
 </summary>
</member>
<member name="F:WL.基础.类型.比较方法.Type">
 <summary>
 只比较两个对象的 Type 是否相等
 </summary>
</member>
<member name="F:WL.基础.类型.比较方法.BaseType">
 <summary>
 比较两个对象是否有相同的基础类或接口
 </summary>
</member>
<member name="F:WL.基础.类型.比较方法.Is">
 <summary>
 使用 Is 关键字来比较，判断两个对象是否引用自同一对象
 </summary>
</member>
<member name="M:WL.基础.类型.比较(System.Object,System.Object,WL.基础.类型.比较方法)">
 <summary>
 用指定的比较方法来比较A和B两个对象是否相等，如果比较出错，只返回 A.Equals(B)
 </summary>
</member>
<member name="M:WL.基础.类型.在列表(System.Collections.IList,System.Object,WL.基础.类型.比较方法)">
 <summary>
 用指定的办法来判断这个物品是否在列表内
 </summary>
</member>
<member name="M:WL.基础.类型.列表去重(System.Collections.IList,WL.基础.类型.比较方法)">
 <summary>
 针对list进行去重
 </summary>
</member>
<member name="M:WL.基础.类型.是当中一个(System.Object,System.Object[])">
 <summary>
 判断寻找的对象是否=内容当中的一个
 </summary>
</member>
<member name="M:WL.基础.类型.是当中一个(WL.基础.类型.比较方法,System.Object,System.Object[])">
 <summary>
 判断寻找的对象是否是内容当中的一个，并使用对应的比较办法
 </summary>
</member>
<member name="M:WL.基础.类型.互换(System.Object@,System.Object@)">
 <summary>
 互换AB两个对象
 </summary>
</member>
<member name="M:WL.基础.类型.反转(System.Boolean@)">
 <summary>
 反转A
 </summary>
</member>
<member name="M:WL.基础.类型.反转(System.Object@,System.Object,System.Object)">
 <summary>
 如果对象等于A，那么把对象换成B
 </summary>
</member>
<member name="M:WL.基础.类型.设最小值(System.Object@,System.Object)">
 <summary>
  If A 小于 最小值 那么 A = 最小值
 </summary>
</member>
<member name="M:WL.基础.类型.设最大值(System.Object@,System.Object)">
 <summary>
  If A 大于 最小值 那么 A = 最小值
 </summary>
</member>
<member name="T:WL.基础.系统">
 <summary>
 和Windows系统相关操作的模块
 </summary>
</member>
<member name="T:WL.基础.系统.剪贴板">
 <summary>
 从剪贴板内获得字符串或图片
 </summary>
</member>
<member name="M:WL.基础.系统.剪贴板.清空">
 <summary>
 清空剪贴板的内容
 </summary>
</member>
<member name="P:WL.基础.系统.剪贴板.有文本">
 <summary>
 检查剪贴板内是否是文本
 </summary>
</member>
<member name="P:WL.基础.系统.剪贴板.有图片">
 <summary>
 检查剪贴板内是否是图片
 </summary>
</member>
<member name="P:WL.基础.系统.剪贴板.有文件列表">
 <summary>
 检查剪贴板内是否是文件列表
 </summary>
</member>
<member name="P:WL.基础.系统.剪贴板.文本">
 <summary>
 获取或设置剪贴板的字符串
 </summary>
</member>
<member name="P:WL.基础.系统.剪贴板.图片">
 <summary>
 获取或设置剪贴板的图片
 </summary>
</member>
<member name="P:WL.基础.系统.剪贴板.文件列表">
 <summary>
 获取剪贴板里存储的 Windows Explorer 的复制文件列表
 </summary>
</member>
<member name="T:WL.基础.系统.系统信息">
 <summary>
 获取Windows系统的一些软硬件信息
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.CPU型号">
 <summary>
 获取电脑CPU的名字字符串
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.CPU频率">
 <summary>
 返回电脑CPU的频率，单位为MHZ
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.CPU核心数量">
 <summary>
 返回CPU的核心数量
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.CPU类型">
 <summary>
 返回CPU的类型
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.屏幕分辨率">
 <summary>
 获取电脑的显示器的分辨率，单位是像素
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.DPI">
 <summary>
 获取电脑的显示DPI，并强制转换为0.25的倍数
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.电脑名">
 <summary>
 获取电脑的名字
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.用户名">
 <summary>
 返回当前的系统用户的用户名
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.内存大小">
 <summary>
 内存的大小，只包括物理内存，单位为MB
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.显卡型号">
 <summary>
 返回电脑的显卡的型号
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.显卡内存大小">
 <summary>
 返回电脑的显卡的内存，单位为MB
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.主板型号">
 <summary>
 返回电脑的主板的型号
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.主板品牌">
 <summary>
 返回电脑的主板生产厂家的名字
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.BIOS类型">
 <summary>
 返回电脑的主板生产厂家的名字
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.存在网络">
 <summary>
 是否存在任意可用本地或互联网的网络连接
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.IPv4地址">
 <summary>
 获取本电脑的首选ipv4地址
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.IPv6地址">
 <summary>
 获取本地的首选ipv4地址
 </summary>
</member>
<member name="P:WL.基础.系统.系统信息.暗色应用模式">
 <summary>
 应用程序的主题是否是暗色模式，只针对windows10，一般为false
 </summary>
 <returns></returns>
</member>
<member name="P:WL.基础.系统.系统信息.暗色系统模式">
 <summary>
 系统的主题是否是暗色模式，只针对windows10，一般为false
 </summary>
 <returns></returns>
</member>
<member name="P:WL.基础.系统.系统信息.获取注册表(System.String,System.String,System.String)">
 <summary>
 从注册表里读取值
 </summary>
</member>
</members>
</doc>
